# Custom ansible.cfg configuration for this repo

[defaults]
callback_whitelist=timer,profile_tasks
callback_enabled = profile_tasks, timer, profile_roles
deprecation_warnings=False

remote_user=root

# Paths to search for roles, colon separated
# Install to the local playbook directory so that we only pull use roles with a specific version.
# This avoids conflicts with versioning when installing roles to a global location.
roles_path = ./roles

# Host key checking is enabled by default
host_key_checking = False

# Logging is off by default unless this path is defined.
log_path = ./ansible.log

# If set, configures the path to the Vault password file as an alternative to
# specifying --vault-password-file on the command line. This can also be
# an executable script that returns the vault password to stdout.
#
vault_password_file = ./.vault_pass

# Ansible can optionally warn when usage of the shell and
# command module appear to be simplified by using a default Ansible module
# instead. These warnings can be silenced by adjusting the following
# setting or adding warn=yes or warn=no to the end of the command line
# parameter string. This will for example suggest using the git module
# instead of shelling out to the git command.
#
command_warnings = False


[ssh_connection]
# ssh arguments to use
# Leaving off ControlPersist will result in poor performance, so use
# paramiko on older platforms rather than removing it, -C controls compression use
ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s -o UserKnownHostsFile=/dev/null

# Enabling pipelining reduces the number of SSH operations required to
# execute a module on the remote server. This can result in a significant
# performance improvement when enabled, however when using "sudo:" you must
# first disable 'requiretty' in /etc/sudoers
#
# By default, this option is disabled to preserve compatibility with
# sudoers configurations that have requiretty (the default on many distros).
#
pipelining = True

[sudo_become_plugin]
#flags = -H -S -n
user = root
